// To check List Palindrome Or Not..
struct node {
    char data;
    node *next;
};
void push(node **head, char c)
{
    node *new_node=new node();
    new_node->data=c;
    new_node->next=*head;
    *head=new_node;
}
void Reverse(node **head)
{
    node *current=*head;
    node *prev=NULL;
    node *next;
    while(current!=NULL)
    {
        next=current->next;
        current->next=prev;
        prev=current;
        current=next;
    }
    *head=prev;
}
bool CompareList(node *head1,node *head2)
{

    while(head1!=NULL &&head2!=NULL)
    {
        if(head1->data==head2->data){
            head1=head1->next;
            head2=head2->next;
        }
        else
            return 0;
    }
    if(head1==NULL &&head2==NULL)
        return 1;
    return 0;
}
bool Ispalindrome(node *head)
{
    node *slowptr=head;
    node *fastptr=head;
    node *second_half;
    node *prevslowptr=head;
    node *Midnode=NULL;
    bool res=true;
    if(head!=NULL &&head->next!=NULL)
    {
        while(fastptr!=NULL &&fastptr->next!=NULL)
        {
            fastptr=fastptr->next->next;
            prevslowptr=slowptr;
            slowptr=slowptr->next;
        }
        if(fastptr!=NULL){
            Midnode=slowptr;
            slowptr=slowptr->next;
        }
        second_half=slowptr;
        
        prevslowptr->next=NULL;
        
        Reverse(&second_half);
        res=CompareList(head,second_half);
        Reverse(&second_half);
        if(Midnode!=NULL)
        {
            prevslowptr->next=Midnode;
            Midnode->next=second_half;
        }
        else
            prevslowptr->next=second_half;
    }
    return res;
}
int main()
{
    node  *head=NULL;
    string str="abcba";
    for(int i=0;i<str.size();i++){
            push(&head,str[i]);
    }
    (Ispalindrome(head))?cout<<"It is palindrome":cout<<"It is Not palindrome";
    return 0;

}
