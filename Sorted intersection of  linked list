
//Sorted intersection of  linked list..
struct node{
  int data;
  node *next;
};
void Push(node **head,int x)
{
    node *newnode=new node();
    newnode->data=x;
    newnode->next=*head;
    *head=newnode;
}
node *SortedIntersection(node *a,node *b)
{
    node dummy;
    node *tail=&dummy;
    dummy.next=NULL;
    while(a!=NULL &&b!=NULL)
    {
        if(a->data==b->data)
        {
            Push(&tail->next,a->data);
            tail=tail->next;
            a=a->next;
            b=b->next;
        }
        else if(a->data<b->data){
            a=a->next;
        }
        else
            b=b->next;
    }
    return (dummy.next);
}
void printList(node *head)
{
    while(head!=NULL){
        cout<<head->data<<" ";
        head=head->next;
    }
    cout<<endl;
}  
int main()
{
    node *a=NULL;
    node *b=NULL;
  Push(&a, 6);
  Push(&a, 5);
  Push(&a, 4);
  Push(&a, 3);
  Push(&a, 2);
  Push(&a, 1); 
  
   Push(&b, 8);
  Push(&b, 6);
  Push(&b, 4);
  Push(&b, 2);
  printList(a);
  printList(b);
  node *intersect=SortedIntersection(a,b);
  printList(intersect);
  return 0;;
}

